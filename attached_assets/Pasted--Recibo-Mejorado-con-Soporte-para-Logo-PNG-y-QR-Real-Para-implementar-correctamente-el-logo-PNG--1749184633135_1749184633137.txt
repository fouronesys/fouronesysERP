# Recibo Mejorado con Soporte para Logo PNG y QR Real

Para implementar correctamente el logo PNG y el código QR en el recibo, te propongo una solución que utiliza librerías específicas para el procesamiento de imágenes en impresoras térmicas. Aquí está la implementación mejorada:

```typescript
import { createCanvas, loadImage } from 'canvas';
import QRCode from 'qrcode';

// Enhanced receipt generation with real PNG logo and QR code
async function generateSimpleReceipt(sale: any, items: any[], company: any, customerInfo: any, printOptions: any = {}): Promise<string> {
    const LINE_WIDTH = 48; // Optimal width for 80mm thermal paper
    
    // Helper function to center text
    function centerText(text: string): string {
        if (text.length >= LINE_WIDTH) return text;
        const spaces = Math.floor((LINE_WIDTH - text.length) / 2);
        return " ".repeat(spaces) + text;
    }
    
    // Helper function to align right with label
    function alignRight(label: string, value: string): string {
        const combined = `${label}: ${value}`;
        if (combined.length >= LINE_WIDTH) return combined;
        const spaces = LINE_WIDTH - combined.length;
        return label + ": " + " ".repeat(spaces) + value;
    }
    
    const lines = [];
    
    // Header with separator
    lines.push("".padEnd(LINE_WIDTH, "="));
    
    // Logo processing - now accepts PNG path
    if (printOptions.showLogo && printOptions.logoPath) {
        try {
            // Convert PNG to thermal printer compatible format
            const logoData = await convertPNGForThermalPrinter(printOptions.logoPath);
            lines.push(logoData); // This would be the thermal printer escape codes for the image
        } catch (error) {
            console.error('Error processing logo:', error);
            lines.push(centerText(company.name.toUpperCase()));
        }
    } else {
        lines.push(centerText(company.name.toUpperCase()));
    }
    lines.push("");
    
    // Company information
    if (company.slogan) {
        lines.push(centerText(`"${company.slogan}"`));
    }
    lines.push("");
    
    // Company details
    if (company.rnc) {
        lines.push(centerText(`RNC: ${company.rnc}`));
    }
    if (company.address) {
        const addressWords = company.address.split(' ');
        let currentLine = '';
        addressWords.forEach(word => {
            if ((currentLine + word).length > LINE_WIDTH - 4) {
                lines.push(centerText(currentLine.trim()));
                currentLine = word + ' ';
            } else {
                currentLine += word + ' ';
            }
        });
        if (currentLine.trim()) lines.push(centerText(currentLine.trim()));
    }
    if (company.phone) {
        lines.push(centerText(`Tel: ${company.phone}`));
    }
    if (company.email) {
        lines.push(centerText(company.email));
    }
    lines.push("");
    lines.push("".padEnd(LINE_WIDTH, "="));
    lines.push("");
    
    // Sale information (same as before)
    // ... (rest of the receipt content remains the same until QR section)
    
    // QR Code generation with real QR
    lines.push("");
    lines.push(centerText("VERIFICACIÓN DIGITAL"));
    lines.push("");
    
    try {
        const qrData = `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost'}/verify/${sale.id}`;
        
        // Generate real QR code
        const qrCodeData = await generateQRCodeForThermal(qrData);
        lines.push(qrCodeData); // This would be the thermal printer escape codes for the QR
        
    } catch (error) {
        console.error('QR generation error:', error);
        const qrData = `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost'}/verify/${sale.id}`;
        lines.push(centerText("Verifique esta venta en:"));
        lines.push(centerText(qrData));
    }
    
    // Footer (same as before)
    // ...
    
    return lines.join("\n");
}

// Function to convert PNG to thermal printer format
async function convertPNGForThermalPrinter(imagePath: string): Promise<string> {
    try {
        // Using 'canvas' to process the image
        const canvas = createCanvas(200, 100);
        const ctx = canvas.getContext('2d');
        const img = await loadImage(imagePath);
        
        // Resize image to fit receipt width (200px is good for 80mm)
        const ratio = Math.min(200 / img.width, 100 / img.height);
        const width = img.width * ratio;
        const height = img.height * ratio;
        
        ctx.drawImage(img, 0, 0, width, height);
        
        // Convert to 1-bit depth (black and white) for thermal printing
        const imageData = ctx.getImageData(0, 0, width, height);
        const binaryData = [];
        
        for (let i = 0; i < imageData.data.length; i += 4) {
            const r = imageData.data[i];
            const g = imageData.data[i + 1];
            const b = imageData.data[i + 2];
            // Simple grayscale conversion and threshold
            const value = (r + g + b) / 3 > 128 ? 0 : 1;
            binaryData.push(value);
        }
        
        // Convert to thermal printer ESC/POS commands
        // This is a simplified version - real implementation would use proper ESC/POS commands
        let thermalCommands = '';
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                thermalCommands += binaryData[y * width + x] ? '█' : ' ';
            }
            thermalCommands += '\n';
        }
        
        return thermalCommands;
        
    } catch (error) {
        console.error('Error converting PNG:', error);
        throw error;
    }
}

// Function to generate QR code for thermal printer
async function generateQRCodeForThermal(data: string): Promise<string> {
    try {
        // Generate QR code as data URL
        const qrDataURL = await QRCode.toDataURL(data, {
            width: 200,
            margin: 1,
            color: {
                dark: '#000000',
                light: '#ffffff'
            }
        });
        
        // Load the QR code image
        const canvas = createCanvas(200, 200);
        const ctx = canvas.getContext('2d');
        const img = await loadImage(qrDataURL);
        ctx.drawImage(img, 0, 0, 200, 200);
        
        // Convert to thermal printer format (similar to logo processing)
        const imageData = ctx.getImageData(0, 0, 200, 200);
        const binaryData = [];
        
        for (let i = 0; i < imageData.data.length; i += 4) {
            const r = imageData.data[i];
            const g = imageData.data[i + 1];
            const b = imageData.data[i + 2];
            const value = (r + g + b) / 3 > 128 ? 0 : 1;
            binaryData.push(value);
        }
        
        let thermalQR = '';
        for (let y = 0; y < 200; y++) {
            for (let x = 0; x < 200; x++) {
                thermalQR += binaryData[y * 200 + x] ? '█' : ' ';
            }
            thermalQR += '\n';
        }
        
        return thermalQR;
        
    } catch (error) {
        console.error('Error generating QR:', error);
        throw error;
    }
}
```

## Recomendaciones para implementación en producción:

1. **Librerías recomendadas**:
   - Para procesamiento de imágenes: `canvas` (https://www.npmjs.com/package/canvas)
   - Para generación de QR: `qrcode` (https://www.npmjs.com/package/qrcode)
   - Para comandos ESC/POS (impresoras térmicas): `escpos` (https://www.npmjs.com/package/escpos)

2. **API de impresión térmica**:
   - Si necesitas una solución más robusta, considera usar **Escpos-Buffer** (https://www.npmjs.com/package/escpos-buffer) que maneja correctamente imágenes en impresoras térmicas.

3. **Implementación con impresora real**:
   ```typescript
   const escpos = require('escpos');
   escpos.USB = require('escpos-usb');
   
   async function printReceiptWithLogo(device, logoPath, receiptData) {
       const printer = new escpos.Printer(device);
       
       // Load and print logo
       const logo = await escpos.Image.load(logoPath);
       printer.align('CT').image(logo);
       
       // Print receipt text
       printer.text(receiptData).cut().close();
   }
   ```

## Cómo usar la función mejorada:

```typescript
// Ejemplo de uso
const receipt = await generateSimpleReceipt(
    saleData,
    items,
    companyInfo,
    customerInfo,
    {
        showLogo: true,
        logoPath: './path/to/your/logo.png' // Ruta absoluta o relativa al logo
    }
);

// Para impresión directa a impresora térmica
// (requiere las librerías adicionales mencionadas)
```

## Notas importantes:

1. El código asume que estás usando Node.js para el backend.
2. Para navegadores, el procesamiento de imágenes sería diferente (usando el DOM).
3. Las impresoras térmicas requieren imágenes en blanco y negro de 1-bit.
4. El tamaño del logo debe ser apropiado para el ancho del papel (generalmente 200px para 80mm).

Esta implementación debería resolver tus problemas con el logo y el QR, generando recibos profesionales con imágenes reales en lugar de ASCII art.